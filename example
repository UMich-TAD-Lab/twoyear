---
title: "Example"
author: "Julianna Calabrese"
date: "February 6, 2019"
output: html_document
editor_options: 
  chunk_output_type: inline
---

## Load in library

```{r include=FALSE}
library(car)
library(ggplot2)
library(MASS)
library(Hmisc)
library(tidyr)
library(tidyverse)
library(dplyr)
library(plyr)
library(summarytools)
library(psych)
```

First, you should down your survey data from Redcap in the form of a csv file. I'll put instructions for how to do that somewhere on the Github readme. 

Here is a pdf about the SCARED for reference: https://sspediatricassociates.com/Forms-and-Policies/Forms/Behavioral,-Mental-Health-Assessment-Forms/SCARED-form-Parent-and-Child-version.aspx

# Pre-Analysis Cleaning

## Load in data

Change the below syntax to fit your computer. Ideally, you should put your dataset somewhere safer than Downloads, like maybe Desktop or Documents. Replace scared with whatever you want to call your dataset, e.g. data or nameofmeasure. 

```{r}
scared <- read.csv("C:/Users/jrcala/Downloads/data.csv")
```

## Remove empty rows

Replace scared with whatever you want to call your dataset and replace scared1_1_2yr with whatever the first item of the dataset. The syntax removes all rows where there is NA for the first item, so theoretically, this should remove everyone who hasn't completed the Qualtrics survey first. This isn't perfect, since some people may have just happened to skip the first item, but this will do for preliminary statistics. 

The logic is: newdata <- olddata(IsNotNA(data$item),] ... so if you wanted, you keep the original 237-but-mostly-NA dataset as well as a whittled down version by naming the newdata something like scared_small. 

```{r}
scared <- scared[!is.na(scared$scared1_1_2yr),]
```

## Reverse coding

Some items may need to be reverse-coded, but to my knowledge, SCARED has no items that need to be coded, but this is what you would do if you wanted to. Please note that the SCARED uses a scale of 1, 2, 3. 

```{r}
scared$scared1_1_2yr_recode <- car::recode(scared$scared1_1_2yr, "1 = 3; 3 = 1")

print(scared$scared1_1_2yr)
print(scared$scared1_1_2yr_recode)

#Now let's remove the made-up recode variable

scared$scared1_1_2yr_recode <- NULL
```

## Make a sum and a mean variable

The below syntax creates two variables and adds them back to the dataset: the mean of all the items and the sum of all the items.

```{r}
names(scared) #This prints the dataset's variables names so, which makes it so I don't totally have to write out each individual variable name

scared_vars <- c("scared1_1_2yr", "scared1_2_2yr", "scared1_3_2yr", "scared1_4_2yr", "scared1_5_2yr", "scared1_6_2yr", "scared2_7_2yr", "scared2_8_2yr", "scared2_9_2yr", "scared2_10_2yr", "scared2_11_2yr", "scared2_12_2yr", "scared3_13_2yr", "scared3_14_2yr", "scared3_15_2yr", "scared3_16_2yr", "scared3_17_2yr", "scared3_18_2yr", "scared4_19_2yr", "scared4_20_2yr", "scared4_21_2yr", "scared4_22_2yr", "scared4_23_2yr", "scared4_24_2yr", "scared5_25_2yr", "scared5_26_2yr", "scared5_27_2yr", "scared5_28_2yr", "scared5_29_2yr", "scared5_30_2yr", "scared6_31_2yr", "scared6_32_2yr", "scared6_33_2yr", "scared6_34_2yr", "scared6_35_2yr", "scared6_36_2yr", "scared6_37_2yr", "scared6_38_2yr")
```

```{r}
scared %>% 
  group_by(id) %>% 
  summarise(scared_total_mean = mean(scared_vars))

names(scared)
```

```{r}
#scared$scared_total_sum <- 
```

## Calculate subscales

Below I calculate the Panic Disorder subscale. I'll round up all the items of that specific subscale, add them together, make an item which represents the sum of the  subscale, and put it back in the dataset.

```{r}
panic_disorder_dummy <- cbind(scared$scared1_1_2yr, scared$scared1_6_2yr, scared$scared2_9_2yr, scared$scared2_12_2yr, scared$scared3_15_2yr, scared$scared3_18_2yr, scared$scared4_19_2yr, scared$scared4_22_2yr, scared$scared4_24_2yr, scared$scared5_27_2yr, scared$scared5_30_2yr, scared$scared6_34_2yr, scared$scared6_28_2yr)

scared$panic_disorder <- rowSums(panic_disorder_dummy, na.rm=FALSE)

rm(panic_disorder_dummy)
```

Whoever is doing the SCARED dataset should do the other subscales here.

Things for just twoyear data:

* Sum
* Mean
* Median
* Std dev
* Std error
* Min/max/range
* IQR
* Kurtosis
* Skewness

```{r, results='asis'}
summarytools::descr(scared, style = "rmarkdown", na.rm=TRUE)
```

Use ?descr to find out more about this function. It's an easy way to get a lot of statistics in a nice table. 
