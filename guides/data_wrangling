---
title: "The Basics of Data Wrangling"
author: "Julianna Calabrese"
date: "`r format(Sys.time(), '%B %d, %Y')`"
output:
  html_document:
    toc: true
    toc_float: true
    theme: united
    highlight: tango
  pdf_document: default
editor_options:
  chunk_output_type: console
---

```{r include=FALSE}
library(car)
library(ggplot2)
library(MASS)
library(Hmisc)
library(tidyr)
library(tidyverse)
library(dplyr)
library(plyr)
library(summarytools)
library(psych)
library(Stat2Data)
```

## Introduction to Data Wrangling

Definitions!

## Load in your data

This guide will use the dataset `airquality` from the base R package `datasets`. 

```{r}
data(airquality)
head(airquality)
```

## Test for cells with missing values

When a value is blank or missing, R will interpret this cell as NA. 

```{r}
head(is.na(airquality))
```

That's not a good way of absorbing information.

```{r}
colSums(is.na(airquality))
```

That's better!

```{r}
which(is.na(airquality$Ozone))
which(is.na(airquality$Solar.R))
```

Remember, `na.rm=TRUE` is your friend!

## Rescaling or reverse-coding variables 

### Rescale

We can use a function in the `weathermetrics` to convert the `Temp` variable from Fahrenheit to Celsuis.

```{r}
library(weathermetrics)
airquality$TempC <- fahrenheit.to.celsius(airquality$Temp, round = 2)
head(airquality)
```

### Reverse-coding

Let's imagine that `airquality` has a variable called `Sunny` where 1 meant Not Sunny, 2 meant Somewhat Sunny, and 3 meant Very Sunny. This is a 3-point Likert scale. 

```{r}
airquality$Sunny <- replicate(1,sample(1:3,153,rep=TRUE))
head(airquality)
```

Now, say we wanted to change this 1-3 scale to a 0-2 scale.

```{r}
library(car)
airquality$Sunny <- car::recode(airquality$Sunny, "1 = 0; 2 = 1; 3 = 2")
head(airquality)
```

## Make sum/mean variables

Let's say we wanted the average of Temp for every month. `aggregate` is an extremely useful function provided by the `stats` package.

```{r}
Temp_month <- aggregate(Temp~Month, data=airquality, mean)
head(Temp_month)
```

We could also do so by day of the month.

```{r}
Temp_day <- aggregate(Temp~Day, data=airquality, mean)
head(Temp_day)
```

## Rename columns

Let's say I wanted to rename `Sunny` to `Sun`.

```{r}
names(airquality)[names(airquality) == "Sunny"] <- "Sun"
head(airquality)
```

## Remove rows

## Remove rows based on condition

Please note that `airquality` in its original form starts out with 153 rows. Let's say I wanted to remove every observation that occured in the month of May.

```{r}
airquality <- airquality[!(airquality$Month==5),]
nrow(airquality)
```

## Remove rows with any NA values

Let's say I wanted to remove any rows that contained a missing value.

```{r}
data(airquality)
airquality <- airquality[complete.cases(airquality), ]
nrow(airquality)
```

## Remove rows based on row numbers

Let's say I want to remove row 53, just because.

```{r}
data(airquality)
airquality <- airquality[-c(53), ]
nrow(airquality)
```

## Remove columns

### Remove column 

Let's say I wanted to remove the `Day` column entirely.

```{r}
airquality$Day <- NULL
head(airquality)
```

### Remove column with any NA values

```{r}
data(airquality)
airquality <- airquality[ , colSums(is.na(airquality)) == 0]
head(airquality)
```

### Remove column based on column number

Similiarly, I can use a very similiar syntax to remove column 6, which is Day.

```{r}
data(airquality)
airquality <- airquality[,-c(6)] 
head(airquality)
```

## Merge two datasets

Let's say I had another dataset called `pollution`. Let's also say that both `airquality` and `pollution` had ID numbers.

```{r}
# Create pollution

water_pollution <- replicate(1,sample(1:10,153,rep=TRUE))
light_pollution <- replicate(1,sample(1:10,153,rep=TRUE))
trash_output <- replicate(1,sample(1:50,153,rep=TRUE))

pollution <- data.frame(water_pollution, light_pollution, trash_output)
```

```{r}
# Give airquality and pollution ID numbers

data(airquality)
airquality <- mutate(airquality, id = rownames(airquality))
pollution <- mutate(pollution, id = rownames(pollution))
```

Now I want to merge `airquality` and `pollution` by `id`. It's important to have a variable that the two datasets have in common, or else `merge` won't know how to merge the datasets.

```{r}
airquality <- merge(airquality, pollution, by = "id")
head(airquality)
```

## Cleaning up your environment

It's important to keep your environment uncluttered while working with data. Try to get rid of unneeded things when you can. I made a bit of a mess when creating the `pollution` dataset. You can remove one object at a time with `rm()`.

```{r}
rm(water_pollution)
```

Or you can remove everything except an object or a list of objects using the below syntax.

```{r}
data(airquality)
rm(list=setdiff(ls(), "airquality"))
```

## Descriptive statistics

Finally, "data cleaning" usually includes basic descriptive statistics to see if the data is skewed or if there is a large number of outliers. 

```{r results = 'asis'}
summarytools::descr(airquality, style = "rmarkdown")
```

For more information about how to make the above table look prettier, go through the [`pretty_r_guide.rmd`](https://github.com/UMich-TAD-Lab/twoyear/blob/master/guides/pretty_r_guide) on Github or you can find a link to the HTML [here.](https://jrcalabrese.github.io/pretty_r_guide.html)
